// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(uuid())
  name              String
  email             String               @unique
  role              ROLE
  profileImage      String?
  memberships       OrganizationMember[] // Relation to the organizations the user is a member of
  organizations     Organization[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  
}

model OrganizationMember {
  id                String               @id @default(uuid())
  userId            String               // Foreign key to User
  organizationId    String               // Foreign key to Organization
  role              ROLE                 // Role of the user (Admin or Member)

  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization      Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@unique([userId, organizationId])     // Ensures a user can join an organization only once
}
model Organization {
  id                String               @id @default(uuid())
  name              String
  ownerId           String               // User ID of the admin/owner
  owner             User                 @relation(fields: [ownerId], references: [id])
  members           OrganizationMember[] // All members of the organization

  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

enum ROLE {
  OWNER     // Full access to manage organization
  MEMBER    // Limited access
}
model Board {
  id    String     @id @default(uuid())
  orgId String
  title  String
  imageId String
  imageThumbUrl String @db.Text
  imageFullUrl String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text
  lists List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id    String     @id @default(uuid())
  title String
  order Int 
  description String? @db.Text
  date    DateTime? @db.Date
  listId String
  list List @relation(fields:[listId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([listId])
}
model List {
  id    String     @id @default(uuid())
  title String
  order Int 
  boardId String
  board Board @relation(fields:[boardId], references: [id], onDelete: Cascade)
  cards Card []

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
} 
enum ACTION {
  CREATE
  UPDATE
  DELETE 
}
enum ENTITY_TYPE {
  BOARD
  LIST
  CARD 
}

model AuditLog {
 id    String     @id @default(uuid())
 orgId String
 action ACTION
 entityId String
 entityType ENTITY_TYPE
 entityTitle String
 userId String
 userImage String @db.Text
 userName String @db.Text

 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}
model orgLimit {
  id    String     @id @default(uuid())
  orgId String @unique
  count Int @default(0)

  createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model orgSubscription {
   id    String     @id @default(uuid())
   orgId String @unique
   stripeCustomerId String? @unique @map(name: "stripe_customer_id")
   stripeSubscriptionId String? @unique @map(name: "stripe_subscription_id")
   stripePriceId String?  @map(name: "stripe_price_id")
   stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
   
}
model Meeting {
  id         Int      @id @default(autoincrement())
  date       DateTime
  timeSlot   String   // e.g., '09:00', '10:00'
  heading    String   // Title or heading of the meeting
  orgId      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model invitations {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  boardId    String
  orgId      String
  listId     String
  status     String
}
model Note {
  id        String     @id @default(cuid())
  orgId     String
  title     String
  content   String
  priority  Priority
  category  String?
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
